/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export type TokenBalanceStruct = {
  tokenAddres: PromiseOrValue<string>;
  balance: PromiseOrValue<BigNumberish>;
};

export type TokenBalanceStructOutput = [string, BigNumber] & {
  tokenAddres: string;
  balance: BigNumber;
};

export type DecimalStruct = {
  value: PromiseOrValue<BigNumberish>;
  decimals: PromiseOrValue<BigNumberish>;
};

export type DecimalStructOutput = [BigNumber, number] & {
  value: BigNumber;
  decimals: number;
};

export type PoolStateStruct = {
  paused: PromiseOrValue<boolean>;
  balances: TokenBalanceStruct[];
  totalLPSupply: TokenBalanceStruct;
  ampFactor: DecimalStruct;
  lpFee: DecimalStruct;
  governanceFee: DecimalStruct;
};

export type PoolStateStructOutput = [
  boolean,
  TokenBalanceStructOutput[],
  TokenBalanceStructOutput,
  DecimalStructOutput,
  DecimalStructOutput,
  DecimalStructOutput
] & {
  paused: boolean;
  balances: TokenBalanceStructOutput[];
  totalLPSupply: TokenBalanceStructOutput;
  ampFactor: DecimalStructOutput;
  lpFee: DecimalStructOutput;
  governanceFee: DecimalStructOutput;
};

export interface IRoutingInterface extends utils.Interface {
  functions: {
    "getPoolStates(address[])": FunctionFragment;
    "onChainSwap(address,uint256,address,address,uint256)": FunctionFragment;
    "receiveAndSwap(bytes,address,uint256)": FunctionFragment;
    "receiveAndSwap(bytes)": FunctionFragment;
    "registerToken(uint16,address,address,uint8)": FunctionFragment;
    "swapAndTransfer(address,uint256,uint256,uint16,bytes32)": FunctionFragment;
    "swimUsdAddress()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "getPoolStates"
      | "onChainSwap"
      | "receiveAndSwap(bytes,address,uint256)"
      | "receiveAndSwap(bytes)"
      | "registerToken"
      | "swapAndTransfer"
      | "swimUsdAddress"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "getPoolStates",
    values: [PromiseOrValue<string>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "onChainSwap",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "receiveAndSwap(bytes,address,uint256)",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "receiveAndSwap(bytes)",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "registerToken",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "swapAndTransfer",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "swimUsdAddress",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "getPoolStates",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "onChainSwap",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "receiveAndSwap(bytes,address,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "receiveAndSwap(bytes)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "swapAndTransfer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "swimUsdAddress",
    data: BytesLike
  ): Result;

  events: {
    "OnChainSwap(address,address,address,uint256)": EventFragment;
    "ReceiveAndSwap(address,uint64,address,uint256)": EventFragment;
    "SwapAndTransfer(address,uint64,address,uint256)": EventFragment;
    "TokenRegistered(uint16,address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "OnChainSwap"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ReceiveAndSwap"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SwapAndTransfer"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TokenRegistered"): EventFragment;
}

export interface OnChainSwapEventObject {
  to: string;
  fromToken: string;
  toToken: string;
  outputAmount: BigNumber;
}
export type OnChainSwapEvent = TypedEvent<
  [string, string, string, BigNumber],
  OnChainSwapEventObject
>;

export type OnChainSwapEventFilter = TypedEventFilter<OnChainSwapEvent>;

export interface ReceiveAndSwapEventObject {
  from: string;
  wormholeSequence: BigNumber;
  token: string;
  amount: BigNumber;
}
export type ReceiveAndSwapEvent = TypedEvent<
  [string, BigNumber, string, BigNumber],
  ReceiveAndSwapEventObject
>;

export type ReceiveAndSwapEventFilter = TypedEventFilter<ReceiveAndSwapEvent>;

export interface SwapAndTransferEventObject {
  from: string;
  wormholeSequence: BigNumber;
  token: string;
  inputAmount: BigNumber;
}
export type SwapAndTransferEvent = TypedEvent<
  [string, BigNumber, string, BigNumber],
  SwapAndTransferEventObject
>;

export type SwapAndTransferEventFilter = TypedEventFilter<SwapAndTransferEvent>;

export interface TokenRegisteredEventObject {
  tokenId: number;
  tokenContract: string;
  chainPool: string;
}
export type TokenRegisteredEvent = TypedEvent<
  [number, string, string],
  TokenRegisteredEventObject
>;

export type TokenRegisteredEventFilter = TypedEventFilter<TokenRegisteredEvent>;

export interface IRouting extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IRoutingInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    getPoolStates(
      poolAddresses: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<[PoolStateStructOutput[]]>;

    onChainSwap(
      fromToken: PromiseOrValue<string>,
      inputAmount: PromiseOrValue<BigNumberish>,
      toOwner: PromiseOrValue<string>,
      toToken: PromiseOrValue<string>,
      minimumOutputAmount: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "receiveAndSwap(bytes,address,uint256)"(
      encodedVm: PromiseOrValue<BytesLike>,
      toToken: PromiseOrValue<string>,
      minimumOutputAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "receiveAndSwap(bytes)"(
      encodedVm: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    registerToken(
      tokenNumber: PromiseOrValue<BigNumberish>,
      tokenAddress: PromiseOrValue<string>,
      poolAddress: PromiseOrValue<string>,
      tokenIndexInPool: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    swapAndTransfer(
      fromToken: PromiseOrValue<string>,
      inputAmount: PromiseOrValue<BigNumberish>,
      firstMinimumOutputAmount: PromiseOrValue<BigNumberish>,
      wormholeRecipientChain: PromiseOrValue<BigNumberish>,
      toOwner: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    swimUsdAddress(overrides?: CallOverrides): Promise<[string]>;
  };

  getPoolStates(
    poolAddresses: PromiseOrValue<string>[],
    overrides?: CallOverrides
  ): Promise<PoolStateStructOutput[]>;

  onChainSwap(
    fromToken: PromiseOrValue<string>,
    inputAmount: PromiseOrValue<BigNumberish>,
    toOwner: PromiseOrValue<string>,
    toToken: PromiseOrValue<string>,
    minimumOutputAmount: PromiseOrValue<BigNumberish>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "receiveAndSwap(bytes,address,uint256)"(
    encodedVm: PromiseOrValue<BytesLike>,
    toToken: PromiseOrValue<string>,
    minimumOutputAmount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "receiveAndSwap(bytes)"(
    encodedVm: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  registerToken(
    tokenNumber: PromiseOrValue<BigNumberish>,
    tokenAddress: PromiseOrValue<string>,
    poolAddress: PromiseOrValue<string>,
    tokenIndexInPool: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  swapAndTransfer(
    fromToken: PromiseOrValue<string>,
    inputAmount: PromiseOrValue<BigNumberish>,
    firstMinimumOutputAmount: PromiseOrValue<BigNumberish>,
    wormholeRecipientChain: PromiseOrValue<BigNumberish>,
    toOwner: PromiseOrValue<BytesLike>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  swimUsdAddress(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    getPoolStates(
      poolAddresses: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<PoolStateStructOutput[]>;

    onChainSwap(
      fromToken: PromiseOrValue<string>,
      inputAmount: PromiseOrValue<BigNumberish>,
      toOwner: PromiseOrValue<string>,
      toToken: PromiseOrValue<string>,
      minimumOutputAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "receiveAndSwap(bytes,address,uint256)"(
      encodedVm: PromiseOrValue<BytesLike>,
      toToken: PromiseOrValue<string>,
      minimumOutputAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, string] & { outputAmount: BigNumber; outpuToken: string }
    >;

    "receiveAndSwap(bytes)"(
      encodedVm: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, string] & { outputAmount: BigNumber; outputToken: string }
    >;

    registerToken(
      tokenNumber: PromiseOrValue<BigNumberish>,
      tokenAddress: PromiseOrValue<string>,
      poolAddress: PromiseOrValue<string>,
      tokenIndexInPool: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    swapAndTransfer(
      fromToken: PromiseOrValue<string>,
      inputAmount: PromiseOrValue<BigNumberish>,
      firstMinimumOutputAmount: PromiseOrValue<BigNumberish>,
      wormholeRecipientChain: PromiseOrValue<BigNumberish>,
      toOwner: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    swimUsdAddress(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    "OnChainSwap(address,address,address,uint256)"(
      to?: PromiseOrValue<string> | null,
      fromToken?: PromiseOrValue<string> | null,
      toToken?: PromiseOrValue<string> | null,
      outputAmount?: null
    ): OnChainSwapEventFilter;
    OnChainSwap(
      to?: PromiseOrValue<string> | null,
      fromToken?: PromiseOrValue<string> | null,
      toToken?: PromiseOrValue<string> | null,
      outputAmount?: null
    ): OnChainSwapEventFilter;

    "ReceiveAndSwap(address,uint64,address,uint256)"(
      from?: PromiseOrValue<string> | null,
      wormholeSequence?: null,
      token?: null,
      amount?: null
    ): ReceiveAndSwapEventFilter;
    ReceiveAndSwap(
      from?: PromiseOrValue<string> | null,
      wormholeSequence?: null,
      token?: null,
      amount?: null
    ): ReceiveAndSwapEventFilter;

    "SwapAndTransfer(address,uint64,address,uint256)"(
      from?: PromiseOrValue<string> | null,
      wormholeSequence?: null,
      token?: null,
      inputAmount?: null
    ): SwapAndTransferEventFilter;
    SwapAndTransfer(
      from?: PromiseOrValue<string> | null,
      wormholeSequence?: null,
      token?: null,
      inputAmount?: null
    ): SwapAndTransferEventFilter;

    "TokenRegistered(uint16,address,address)"(
      tokenId?: PromiseOrValue<BigNumberish> | null,
      tokenContract?: PromiseOrValue<string> | null,
      chainPool?: null
    ): TokenRegisteredEventFilter;
    TokenRegistered(
      tokenId?: PromiseOrValue<BigNumberish> | null,
      tokenContract?: PromiseOrValue<string> | null,
      chainPool?: null
    ): TokenRegisteredEventFilter;
  };

  estimateGas: {
    getPoolStates(
      poolAddresses: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    onChainSwap(
      fromToken: PromiseOrValue<string>,
      inputAmount: PromiseOrValue<BigNumberish>,
      toOwner: PromiseOrValue<string>,
      toToken: PromiseOrValue<string>,
      minimumOutputAmount: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "receiveAndSwap(bytes,address,uint256)"(
      encodedVm: PromiseOrValue<BytesLike>,
      toToken: PromiseOrValue<string>,
      minimumOutputAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "receiveAndSwap(bytes)"(
      encodedVm: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    registerToken(
      tokenNumber: PromiseOrValue<BigNumberish>,
      tokenAddress: PromiseOrValue<string>,
      poolAddress: PromiseOrValue<string>,
      tokenIndexInPool: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    swapAndTransfer(
      fromToken: PromiseOrValue<string>,
      inputAmount: PromiseOrValue<BigNumberish>,
      firstMinimumOutputAmount: PromiseOrValue<BigNumberish>,
      wormholeRecipientChain: PromiseOrValue<BigNumberish>,
      toOwner: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    swimUsdAddress(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    getPoolStates(
      poolAddresses: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    onChainSwap(
      fromToken: PromiseOrValue<string>,
      inputAmount: PromiseOrValue<BigNumberish>,
      toOwner: PromiseOrValue<string>,
      toToken: PromiseOrValue<string>,
      minimumOutputAmount: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "receiveAndSwap(bytes,address,uint256)"(
      encodedVm: PromiseOrValue<BytesLike>,
      toToken: PromiseOrValue<string>,
      minimumOutputAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "receiveAndSwap(bytes)"(
      encodedVm: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    registerToken(
      tokenNumber: PromiseOrValue<BigNumberish>,
      tokenAddress: PromiseOrValue<string>,
      poolAddress: PromiseOrValue<string>,
      tokenIndexInPool: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    swapAndTransfer(
      fromToken: PromiseOrValue<string>,
      inputAmount: PromiseOrValue<BigNumberish>,
      firstMinimumOutputAmount: PromiseOrValue<BigNumberish>,
      wormholeRecipientChain: PromiseOrValue<BigNumberish>,
      toOwner: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    swimUsdAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
