/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export type TokenBalanceStruct = {
  tokenAddres: PromiseOrValue<string>;
  balance: PromiseOrValue<BigNumberish>;
};

export type TokenBalanceStructOutput = [string, BigNumber] & {
  tokenAddres: string;
  balance: BigNumber;
};

export type DecimalStruct = {
  value: PromiseOrValue<BigNumberish>;
  decimals: PromiseOrValue<BigNumberish>;
};

export type DecimalStructOutput = [BigNumber, number] & {
  value: BigNumber;
  decimals: number;
};

export type PoolStateStruct = {
  paused: PromiseOrValue<boolean>;
  balances: TokenBalanceStruct[];
  totalLPSupply: TokenBalanceStruct;
  ampFactor: DecimalStruct;
  lpFee: DecimalStruct;
  governanceFee: DecimalStruct;
};

export type PoolStateStructOutput = [
  boolean,
  TokenBalanceStructOutput[],
  TokenBalanceStructOutput,
  DecimalStructOutput,
  DecimalStructOutput,
  DecimalStructOutput
] & {
  paused: boolean;
  balances: TokenBalanceStructOutput[];
  totalLPSupply: TokenBalanceStructOutput;
  ampFactor: DecimalStructOutput;
  lpFee: DecimalStructOutput;
  governanceFee: DecimalStructOutput;
};

export interface IPoolInterface extends utils.Interface {
  functions: {
    "add(uint256[],uint256)": FunctionFragment;
    "getState()": FunctionFragment;
    "removeExactBurn(uint256,uint8,uint256)": FunctionFragment;
    "removeExactOutput(uint256[],uint256)": FunctionFragment;
    "removeUniform(uint256,uint256[])": FunctionFragment;
    "swap(uint256,uint8,uint8,uint256)": FunctionFragment;
    "swapExactInput(uint256[],uint8,uint256)": FunctionFragment;
    "swapExactOutput(uint256,uint8,uint256[])": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "add"
      | "getState"
      | "removeExactBurn"
      | "removeExactOutput"
      | "removeUniform"
      | "swap"
      | "swapExactInput"
      | "swapExactOutput"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "add",
    values: [PromiseOrValue<BigNumberish>[], PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: "getState", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "removeExactBurn",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "removeExactOutput",
    values: [PromiseOrValue<BigNumberish>[], PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "removeUniform",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "swap",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "swapExactInput",
    values: [
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "swapExactOutput",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>[]
    ]
  ): string;

  decodeFunctionResult(functionFragment: "add", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getState", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "removeExactBurn",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeExactOutput",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeUniform",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "swap", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "swapExactInput",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "swapExactOutput",
    data: BytesLike
  ): Result;

  events: {};
}

export interface IPool extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IPoolInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    add(
      inputAmounts: PromiseOrValue<BigNumberish>[],
      minimumMintAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getState(
      overrides?: CallOverrides
    ): Promise<[PoolStateStructOutput] & { state: PoolStateStructOutput }>;

    removeExactBurn(
      burnAmount: PromiseOrValue<BigNumberish>,
      outputTokenIndex: PromiseOrValue<BigNumberish>,
      minimumOutputAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    removeExactOutput(
      outputAmounts: PromiseOrValue<BigNumberish>[],
      maximumBurnAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    removeUniform(
      burnAmount: PromiseOrValue<BigNumberish>,
      minimumOutputAmounts: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    swap(
      inputAmount: PromiseOrValue<BigNumberish>,
      inputTokenIndex: PromiseOrValue<BigNumberish>,
      outputTokenIndex: PromiseOrValue<BigNumberish>,
      minimumOutputAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    swapExactInput(
      inputAmounts: PromiseOrValue<BigNumberish>[],
      outputTokenIndex: PromiseOrValue<BigNumberish>,
      minimumOutputAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    swapExactOutput(
      maximumInputAmount: PromiseOrValue<BigNumberish>,
      inputTokenIndex: PromiseOrValue<BigNumberish>,
      outputAmounts: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  add(
    inputAmounts: PromiseOrValue<BigNumberish>[],
    minimumMintAmount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getState(overrides?: CallOverrides): Promise<PoolStateStructOutput>;

  removeExactBurn(
    burnAmount: PromiseOrValue<BigNumberish>,
    outputTokenIndex: PromiseOrValue<BigNumberish>,
    minimumOutputAmount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  removeExactOutput(
    outputAmounts: PromiseOrValue<BigNumberish>[],
    maximumBurnAmount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  removeUniform(
    burnAmount: PromiseOrValue<BigNumberish>,
    minimumOutputAmounts: PromiseOrValue<BigNumberish>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  swap(
    inputAmount: PromiseOrValue<BigNumberish>,
    inputTokenIndex: PromiseOrValue<BigNumberish>,
    outputTokenIndex: PromiseOrValue<BigNumberish>,
    minimumOutputAmount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  swapExactInput(
    inputAmounts: PromiseOrValue<BigNumberish>[],
    outputTokenIndex: PromiseOrValue<BigNumberish>,
    minimumOutputAmount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  swapExactOutput(
    maximumInputAmount: PromiseOrValue<BigNumberish>,
    inputTokenIndex: PromiseOrValue<BigNumberish>,
    outputAmounts: PromiseOrValue<BigNumberish>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    add(
      inputAmounts: PromiseOrValue<BigNumberish>[],
      minimumMintAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getState(overrides?: CallOverrides): Promise<PoolStateStructOutput>;

    removeExactBurn(
      burnAmount: PromiseOrValue<BigNumberish>,
      outputTokenIndex: PromiseOrValue<BigNumberish>,
      minimumOutputAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    removeExactOutput(
      outputAmounts: PromiseOrValue<BigNumberish>[],
      maximumBurnAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    removeUniform(
      burnAmount: PromiseOrValue<BigNumberish>,
      minimumOutputAmounts: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    swap(
      inputAmount: PromiseOrValue<BigNumberish>,
      inputTokenIndex: PromiseOrValue<BigNumberish>,
      outputTokenIndex: PromiseOrValue<BigNumberish>,
      minimumOutputAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    swapExactInput(
      inputAmounts: PromiseOrValue<BigNumberish>[],
      outputTokenIndex: PromiseOrValue<BigNumberish>,
      minimumOutputAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    swapExactOutput(
      maximumInputAmount: PromiseOrValue<BigNumberish>,
      inputTokenIndex: PromiseOrValue<BigNumberish>,
      outputAmounts: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  filters: {};

  estimateGas: {
    add(
      inputAmounts: PromiseOrValue<BigNumberish>[],
      minimumMintAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getState(overrides?: CallOverrides): Promise<BigNumber>;

    removeExactBurn(
      burnAmount: PromiseOrValue<BigNumberish>,
      outputTokenIndex: PromiseOrValue<BigNumberish>,
      minimumOutputAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    removeExactOutput(
      outputAmounts: PromiseOrValue<BigNumberish>[],
      maximumBurnAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    removeUniform(
      burnAmount: PromiseOrValue<BigNumberish>,
      minimumOutputAmounts: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    swap(
      inputAmount: PromiseOrValue<BigNumberish>,
      inputTokenIndex: PromiseOrValue<BigNumberish>,
      outputTokenIndex: PromiseOrValue<BigNumberish>,
      minimumOutputAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    swapExactInput(
      inputAmounts: PromiseOrValue<BigNumberish>[],
      outputTokenIndex: PromiseOrValue<BigNumberish>,
      minimumOutputAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    swapExactOutput(
      maximumInputAmount: PromiseOrValue<BigNumberish>,
      inputTokenIndex: PromiseOrValue<BigNumberish>,
      outputAmounts: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    add(
      inputAmounts: PromiseOrValue<BigNumberish>[],
      minimumMintAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getState(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    removeExactBurn(
      burnAmount: PromiseOrValue<BigNumberish>,
      outputTokenIndex: PromiseOrValue<BigNumberish>,
      minimumOutputAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    removeExactOutput(
      outputAmounts: PromiseOrValue<BigNumberish>[],
      maximumBurnAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    removeUniform(
      burnAmount: PromiseOrValue<BigNumberish>,
      minimumOutputAmounts: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    swap(
      inputAmount: PromiseOrValue<BigNumberish>,
      inputTokenIndex: PromiseOrValue<BigNumberish>,
      outputTokenIndex: PromiseOrValue<BigNumberish>,
      minimumOutputAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    swapExactInput(
      inputAmounts: PromiseOrValue<BigNumberish>[],
      outputTokenIndex: PromiseOrValue<BigNumberish>,
      minimumOutputAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    swapExactOutput(
      maximumInputAmount: PromiseOrValue<BigNumberish>,
      inputTokenIndex: PromiseOrValue<BigNumberish>,
      outputAmounts: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
