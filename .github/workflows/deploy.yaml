name: "Deploy UI to production"

on:
  push:
    branches:
      - master
    paths:
      - "apps/ui/**"
      - ".github/workflows/deploy.yaml"

jobs:
  production-deploy:
    runs-on: ubuntu-latest

    # Allow only one concurrent deployment
    concurrency:
      group: ${{ github.workflow }}-${{ github.ref }}
      cancel-in-progress: true

    env:
      CLOUDFLARE_PROJECT_NAME: swim-ui
      CLOUDFLARE_R2_BUCKET_NAME: ui-accumulated-build
      ACCUMULATED_BUILD_PATH: /tmp/ui-accumulated-build
      DOWNLOADS_PATH: /tmp/downloads
      UPLOADS_PATH: /tmp/uploads
      RELEASES_DIRECTORY_NAME: __releases
      TAR_FILENAME: files.tar.gz
      NUMBER_OF_RELEASES_TO_KEEP: 50
      ACTIONS_STEP_DEBUG: true

      # rclone env config: https://rclone.org/docs/#config-file
      RCLONE_CONFIG_R2UI_TYPE: s3
      RCLONE_CONFIG_R2UI_PROVIDER: Cloudflare
      RCLONE_CONFIG_R2UI_ENDPOINT: https://21fe306b23881c1b0affeb8164d46ba5.r2.cloudflarestorage.com
      RCLONE_CONFIG_R2UI_ACCESS_KEY_ID: ${{ secrets.RCLONE_CONFIG_R2UI_ACCESS_KEY_ID }}
      RCLONE_CONFIG_R2UI_SECRET_ACCESS_KEY: ${{ secrets.RCLONE_CONFIG_R2UI_SECRET_ACCESS_KEY }}

    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 2
      - uses: actions/setup-node@v3
        with:
          node-version: 16
          # This caches Yarn cache (yarn config get cacheFolder) but not node_modules
          # https://github.com/actions/setup-node/issues/325#issuecomment-1120962692
          cache: "yarn"

      - name: Install rclone
        run: |
          sudo -v ; curl https://rclone.org/install.sh | sudo bash
          which rclone

      - name: Download accumulated build from Cloudflare R2
        run: |
          echo "Downloading accumulated build from Cloudflare R2 at ${{ env.DOWNLOADS_PATH }}/"
          mkdir -p ${{ env.DOWNLOADS_PATH }}

          FILES_FOUND=$(rclone ls r2ui: | grep ${{ env.TAR_FILENAME }} | wc -l | xargs)
          if [[ $FILES_FOUND == '1' ]]
          then
            echo "Found ${{ env.TAR_FILENAME }} on remote. Copying."
            rclone copy r2ui:${{ env.CLOUDFLARE_R2_BUCKET_NAME }}/${{ env.TAR_FILENAME }} ${{ env.DOWNLOADS_PATH }}
          else
            echo "Did not find ${{ env.TAR_FILENAME }} on remote."
          fi

          echo "Contents of ${{ env.DOWNLOADS_PATH }}/"
          ls -laR ${{ env.DOWNLOADS_PATH }}

      - name: Extract previous builds
        run: |
          TAR_PATH="${{ env.DOWNLOADS_PATH }}/${{ env.TAR_FILENAME }}"

          echo "TAR_PATH: $TAR_PATH"

          if test -f "$TAR_PATH"; then
            echo "${{ env.TAR_FILENAME }} exists. Extracting..."
            cd ${{ env.DOWNLOADS_PATH }}
            tar -xzvf ${{ env.TAR_FILENAME }}
            rm ${{ env.TAR_FILENAME }}

            echo "Contents of ${{ env.DOWNLOADS_PATH }}/"
            ls -laR ${{ env.DOWNLOADS_PATH }}

            # Copy previous cache to the new temporary cache folder
            echo "Copying accumulated build to ${{ env.ACCUMULATED_BUILD_PATH }}"
            cp -r ${{ env.DOWNLOADS_PATH }}/. ${{ env.ACCUMULATED_BUILD_PATH }}
          else
            echo "No previous build was found. Contents of ${{ env.DOWNLOADS_PATH }}/"
            ls -laR ${{ env.DOWNLOADS_PATH }}
          fi

      - name: Install dependencies
        run: yarn install --immutable --network-timeout 180000

      - name: Get production environment variables from Cloudflare Pages
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CF_SWIM_PAGES_API_TOKEN }}
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CF_ACCOUNT_ID }}
        run: |
          # Get production environment variables from Cloudflare Pages
          # https://api.cloudflare.com/#pages-project-get-project
          # and append it to $GITHUB_ENV
          # https://docs.github.com/en/actions/using-workflows/workflow-commands-for-github-actions#setting-an-environment-variable
          curl -s -X GET "https://api.cloudflare.com/client/v4/accounts/$CLOUDFLARE_ACCOUNT_ID/pages/projects/${{ env.CLOUDFLARE_PROJECT_NAME }}" \
            -H "Authorization: Bearer $CLOUDFLARE_API_TOKEN" \
            -H "Content-Type: application/json" \
            --compressed |
            jq -r '.result.deployment_configs.production.env_vars | to_entries[] | "\(.key)=\(.value.value)"' > ./apps/ui/.env

      - name: Build UI
        env:
          NODE_OPTIONS: "--max_old_space_size=4096"
          CI: false

        run: |
          ls -lah apps/ui
          cat apps/ui/.env
          echo "Building UI"
          yarn release-ui

          echo "Creating release file with all files"
          cd apps/ui/build
          rm static/{css,js}/*.map
          mkdir ${{ env.RELEASES_DIRECTORY_NAME }}
          find . > "${{ env.RELEASES_DIRECTORY_NAME }}/$(date +'%s')"
          ls -laR ${{ env.RELEASES_DIRECTORY_NAME }}

      - name: Merge with previous builds
        run: |
          echo "Contents of apps/ui/build/"
          ls -laR apps/ui/build/
          cp -r apps/ui/build/. ${{ env.ACCUMULATED_BUILD_PATH }}

          echo "Size of ${{ env.ACCUMULATED_BUILD_PATH }}"
          du -sh ${{ env.ACCUMULATED_BUILD_PATH }}

          echo "Contents of ${{ env.ACCUMULATED_BUILD_PATH }}"
          ls -laR ${{ env.ACCUMULATED_BUILD_PATH }}

          echo "Cleanup old releases"
          cd ${{ env.ACCUMULATED_BUILD_PATH }}
          echo "Existing releases"
          ls -laR ${{ env.RELEASES_DIRECTORY_NAME }}
          find ${{ env.RELEASES_DIRECTORY_NAME }} | tail -n +2 | sort -r | tail -n +$(expr ${{ env.NUMBER_OF_RELEASES_TO_KEEP }} + 1) | xargs rm -f
          echo "Keeping the following releases"
          ls -laR ${{ env.RELEASES_DIRECTORY_NAME }}
          echo "Creating index file and removing expired files"
          cd ${{ env.RELEASES_DIRECTORY_NAME }}
          cat $(ls) > ALL_FILES
          cd ..
          for file in $(find . | grep -v ${{ env.RELEASES_DIRECTORY_NAME }})
          do
            if grep -q $file ${{ env.RELEASES_DIRECTORY_NAME }}/ALL_FILES; then
              echo "found $file in releases. keeping it."
            else
              echo "not found $file in releases. removing it."
              rm $file
            fi
          done
          rm ${{ env.RELEASES_DIRECTORY_NAME }}/ALL_FILES

      - name: Upload merged build to Cloudflare R2
        run: |
          echo "Preparing tar file for upload"
          mkdir -p ${{ env.UPLOADS_PATH }}
          cd ${{ env.UPLOADS_PATH }}
          tar -C ${{ env.ACCUMULATED_BUILD_PATH }} -czvf ${{ env.TAR_FILENAME }} .

          echo "Contents of ${{ env.UPLOADS_PATH }}"
          ls -laR ${{ env.UPLOADS_PATH }}

          echo "Upload accumulated build to Cloudflare R2"
          rclone sync ${{ env.UPLOADS_PATH }} r2ui:${{ env.CLOUDFLARE_R2_BUCKET_NAME }}

      - name: Direct upload built UI to Cloudflare Pages
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CF_SWIM_PAGES_API_TOKEN }}
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CF_ACCOUNT_ID }}
        run: |
          npx --yes wrangler@2 pages publish ${{ env.ACCUMULATED_BUILD_PATH }} --project-name=${{ env.CLOUDFLARE_PROJECT_NAME }} --branch=${{ github.head_ref || github.ref_name }}
